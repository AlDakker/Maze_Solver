;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 5/26/2024 10:31:15 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x28CE      	GOTO       206
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00A9      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00AA      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A0      	MOVWF      32
;Maze_Solver.c,68 :: 		void interrupt() {
;Maze_Solver.c,69 :: 		if (INTCON & 0x04) { // TMR0 Overflow interrupt, will get here every 1ms
0x000D	0x1D0B      	BTFSS      INTCON, 2
0x000E	0x2816      	GOTO       L_interrupt12
;Maze_Solver.c,70 :: 		TMR0 = 248;
0x000F	0x30F8      	MOVLW      248
0x0010	0x0081      	MOVWF      TMR0
;Maze_Solver.c,71 :: 		tick++;
0x0011	0x0AA3      	INCF       _tick, 1
0x0012	0x1903      	BTFSC      STATUS, 2
0x0013	0x0AA4      	INCF       _tick+1, 1
;Maze_Solver.c,72 :: 		INTCON &= 0xFB; // Clear T0IF
0x0014	0x30FB      	MOVLW      251
0x0015	0x058B      	ANDWF      INTCON, 1
;Maze_Solver.c,73 :: 		}
L_interrupt12:
;Maze_Solver.c,74 :: 		}
L_end_interrupt:
L__interrupt26:
0x0016	0x0820      	MOVF       32, 0
0x0017	0x00F0      	MOVWF      R0
0x0018	0x082A      	MOVF       ___savePCLATH, 0
0x0019	0x008A      	MOVWF      PCLATH
0x001A	0x0E29      	SWAPF      ___saveSTATUS, 0
0x001B	0x0083      	MOVWF      STATUS
0x001C	0x0EFF      	SWAPF      R15, 1
0x001D	0x0E7F      	SWAPF      R15, 0
0x001E	0x0009      	RETFIE
; end of _interrupt
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x001F	0x1283      	BCF        STATUS, 5
0x0020	0x1303      	BCF        STATUS, 6
0x0021	0x0828      	MOVF       ___DoICPAddr+1, 0
0x0022	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0023	0x0827      	MOVF       ___DoICPAddr, 0
0x0024	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0025	0x0008      	RETURN
; end of _____DoICP
_myDelay:
;Maze_Solver.c,76 :: 		void myDelay(int const x) {
;Maze_Solver.c,77 :: 		tick = 0;
0x0026	0x1283      	BCF        STATUS, 5
0x0027	0x1303      	BCF        STATUS, 6
0x0028	0x01A3      	CLRF       _tick
0x0029	0x01A4      	CLRF       _tick+1
;Maze_Solver.c,78 :: 		while (tick < x);
L_myDelay13:
0x002A	0x3080      	MOVLW      128
0x002B	0x0624      	XORWF      _tick+1, 0
0x002C	0x00F0      	MOVWF      R0
0x002D	0x3080      	MOVLW      128
0x002E	0x062C      	XORWF      FARG_myDelay_x+1, 0
0x002F	0x0270      	SUBWF      R0, 0
0x0030	0x1D03      	BTFSS      STATUS, 2
0x0031	0x2834      	GOTO       L__myDelay28
0x0032	0x082B      	MOVF       FARG_myDelay_x, 0
0x0033	0x0223      	SUBWF      _tick, 0
L__myDelay28:
0x0034	0x1803      	BTFSC      STATUS, 0
0x0035	0x2837      	GOTO       L_myDelay14
0x0036	0x282A      	GOTO       L_myDelay13
L_myDelay14:
;Maze_Solver.c,79 :: 		}
L_end_myDelay:
0x0037	0x0008      	RETURN
; end of _myDelay
_enables_off:
;Maze_Solver.c,148 :: 		void enables_off() {
;Maze_Solver.c,150 :: 		PORTD &= 0b00111111;
0x0038	0x303F      	MOVLW      63
0x0039	0x1283      	BCF        STATUS, 5
0x003A	0x1303      	BCF        STATUS, 6
0x003B	0x0588      	ANDWF      PORTD, 1
;Maze_Solver.c,151 :: 		}
L_end_enables_off:
0x003C	0x0008      	RETURN
; end of _enables_off
_move_forward:
;Maze_Solver.c,81 :: 		void move_forward() {
;Maze_Solver.c,82 :: 		turning_counter = 1;
0x003D	0x3001      	MOVLW      1
0x003E	0x1283      	BCF        STATUS, 5
0x003F	0x1303      	BCF        STATUS, 6
0x0040	0x00A1      	MOVWF      _turning_counter
0x0041	0x3000      	MOVLW      0
0x0042	0x00A2      	MOVWF      _turning_counter+1
;Maze_Solver.c,83 :: 		turning_threshold = 2;
0x0043	0x3002      	MOVLW      2
0x0044	0x00A5      	MOVWF      _turning_threshold
0x0045	0x3000      	MOVLW      0
0x0046	0x00A6      	MOVWF      _turning_threshold+1
;Maze_Solver.c,86 :: 		PORTB &= 0b01000100;
0x0047	0x3044      	MOVLW      68
0x0048	0x0586      	ANDWF      PORTB, 1
;Maze_Solver.c,88 :: 		while (turning_counter <= turning_threshold) {
L_move_forward15:
0x0049	0x3080      	MOVLW      128
0x004A	0x0626      	XORWF      _turning_threshold+1, 0
0x004B	0x00F0      	MOVWF      R0
0x004C	0x3080      	MOVLW      128
0x004D	0x0622      	XORWF      _turning_counter+1, 0
0x004E	0x0270      	SUBWF      R0, 0
0x004F	0x1D03      	BTFSS      STATUS, 2
0x0050	0x2853      	GOTO       L__move_forward30
0x0051	0x0821      	MOVF       _turning_counter, 0
0x0052	0x0225      	SUBWF      _turning_threshold, 0
L__move_forward30:
0x0053	0x1C03      	BTFSS      STATUS, 0
0x0054	0x285F      	GOTO       L_move_forward16
;Maze_Solver.c,90 :: 		PORTB |= 0b00100010;
0x0055	0x3022      	MOVLW      34
0x0056	0x0486      	IORWF      PORTB, 1
;Maze_Solver.c,92 :: 		myDelay(210);
0x0057	0x30D2      	MOVLW      210
0x0058	0x00AB      	MOVWF      FARG_myDelay_x
0x0059	0x01AC      	CLRF       FARG_myDelay_x+1
0x005A	0x2026      	CALL       _myDelay
;Maze_Solver.c,95 :: 		turning_counter++;
0x005B	0x0AA1      	INCF       _turning_counter, 1
0x005C	0x1903      	BTFSC      STATUS, 2
0x005D	0x0AA2      	INCF       _turning_counter+1, 1
;Maze_Solver.c,96 :: 		}
0x005E	0x2849      	GOTO       L_move_forward15
L_move_forward16:
;Maze_Solver.c,97 :: 		PORTB &= 0b11001001;
0x005F	0x30C9      	MOVLW      201
0x0060	0x0586      	ANDWF      PORTB, 1
;Maze_Solver.c,98 :: 		}
L_end_move_forward:
0x0061	0x0008      	RETURN
; end of _move_forward
_stop:
;Maze_Solver.c,138 :: 		void stop() {
;Maze_Solver.c,140 :: 		enables_off();
0x0062	0x2038      	CALL       _enables_off
;Maze_Solver.c,141 :: 		PORTB &= 0b11001001;
0x0063	0x30C9      	MOVLW      201
0x0064	0x0586      	ANDWF      PORTB, 1
;Maze_Solver.c,142 :: 		}
L_end_stop:
0x0065	0x0008      	RETURN
; end of _stop
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x0066	0x201F      	CALL       _____DoICP
0x0067	0x118A      	BCF        PCLATH, 3
0x0068	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x0069	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x006A	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x006B	0x0AA7      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x006C	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x006D	0x0AA8      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x006E	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x006F	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x0070	0x2866      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x0071	0x0008      	RETURN
; end of ___CC2DW
_move_left:
;Maze_Solver.c,119 :: 		void move_left() {
;Maze_Solver.c,120 :: 		turning_counter = 1;
0x0072	0x3001      	MOVLW      1
0x0073	0x1283      	BCF        STATUS, 5
0x0074	0x1303      	BCF        STATUS, 6
0x0075	0x00A1      	MOVWF      _turning_counter
0x0076	0x3000      	MOVLW      0
0x0077	0x00A2      	MOVWF      _turning_counter+1
;Maze_Solver.c,121 :: 		turning_threshold = 2;
0x0078	0x3002      	MOVLW      2
0x0079	0x00A5      	MOVWF      _turning_threshold
0x007A	0x3000      	MOVLW      0
0x007B	0x00A6      	MOVWF      _turning_threshold+1
;Maze_Solver.c,124 :: 		PORTB &= 0b11001001;
0x007C	0x30C9      	MOVLW      201
0x007D	0x0586      	ANDWF      PORTB, 1
;Maze_Solver.c,126 :: 		while (turning_counter <= turning_threshold) {
L_move_left19:
0x007E	0x3080      	MOVLW      128
0x007F	0x0626      	XORWF      _turning_threshold+1, 0
0x0080	0x00F0      	MOVWF      R0
0x0081	0x3080      	MOVLW      128
0x0082	0x0622      	XORWF      _turning_counter+1, 0
0x0083	0x0270      	SUBWF      R0, 0
0x0084	0x1D03      	BTFSS      STATUS, 2
0x0085	0x2888      	GOTO       L__move_left34
0x0086	0x0821      	MOVF       _turning_counter, 0
0x0087	0x0225      	SUBWF      _turning_threshold, 0
L__move_left34:
0x0088	0x1C03      	BTFSS      STATUS, 0
0x0089	0x2895      	GOTO       L_move_left20
;Maze_Solver.c,128 :: 		PORTB |= 0b00100100;
0x008A	0x3024      	MOVLW      36
0x008B	0x0486      	IORWF      PORTB, 1
;Maze_Solver.c,130 :: 		myDelay(320);
0x008C	0x3040      	MOVLW      64
0x008D	0x00AB      	MOVWF      FARG_myDelay_x
0x008E	0x3001      	MOVLW      1
0x008F	0x00AC      	MOVWF      FARG_myDelay_x+1
0x0090	0x2026      	CALL       _myDelay
;Maze_Solver.c,133 :: 		turning_counter++;
0x0091	0x0AA1      	INCF       _turning_counter, 1
0x0092	0x1903      	BTFSC      STATUS, 2
0x0093	0x0AA2      	INCF       _turning_counter+1, 1
;Maze_Solver.c,134 :: 		}
0x0094	0x287E      	GOTO       L_move_left19
L_move_left20:
;Maze_Solver.c,135 :: 		PORTB &= 0b11001001;
0x0095	0x30C9      	MOVLW      201
0x0096	0x0586      	ANDWF      PORTB, 1
;Maze_Solver.c,136 :: 		}
L_end_move_left:
0x0097	0x0008      	RETURN
; end of _move_left
_move_right:
;Maze_Solver.c,100 :: 		void move_right() {
;Maze_Solver.c,101 :: 		turning_counter = 1;
0x0098	0x3001      	MOVLW      1
0x0099	0x1283      	BCF        STATUS, 5
0x009A	0x1303      	BCF        STATUS, 6
0x009B	0x00A1      	MOVWF      _turning_counter
0x009C	0x3000      	MOVLW      0
0x009D	0x00A2      	MOVWF      _turning_counter+1
;Maze_Solver.c,102 :: 		turning_threshold = 2;
0x009E	0x3002      	MOVLW      2
0x009F	0x00A5      	MOVWF      _turning_threshold
0x00A0	0x3000      	MOVLW      0
0x00A1	0x00A6      	MOVWF      _turning_threshold+1
;Maze_Solver.c,105 :: 		PORTB &= 0b11001001;
0x00A2	0x30C9      	MOVLW      201
0x00A3	0x0586      	ANDWF      PORTB, 1
;Maze_Solver.c,107 :: 		while (turning_counter <= turning_threshold) {
L_move_right17:
0x00A4	0x3080      	MOVLW      128
0x00A5	0x0626      	XORWF      _turning_threshold+1, 0
0x00A6	0x00F0      	MOVWF      R0
0x00A7	0x3080      	MOVLW      128
0x00A8	0x0622      	XORWF      _turning_counter+1, 0
0x00A9	0x0270      	SUBWF      R0, 0
0x00AA	0x1D03      	BTFSS      STATUS, 2
0x00AB	0x28AE      	GOTO       L__move_right32
0x00AC	0x0821      	MOVF       _turning_counter, 0
0x00AD	0x0225      	SUBWF      _turning_threshold, 0
L__move_right32:
0x00AE	0x1C03      	BTFSS      STATUS, 0
0x00AF	0x28BA      	GOTO       L_move_right18
;Maze_Solver.c,109 :: 		PORTB |= 0b00010010;
0x00B0	0x3012      	MOVLW      18
0x00B1	0x0486      	IORWF      PORTB, 1
;Maze_Solver.c,111 :: 		myDelay(245);
0x00B2	0x30F5      	MOVLW      245
0x00B3	0x00AB      	MOVWF      FARG_myDelay_x
0x00B4	0x01AC      	CLRF       FARG_myDelay_x+1
0x00B5	0x2026      	CALL       _myDelay
;Maze_Solver.c,114 :: 		turning_counter++;
0x00B6	0x0AA1      	INCF       _turning_counter, 1
0x00B7	0x1903      	BTFSC      STATUS, 2
0x00B8	0x0AA2      	INCF       _turning_counter+1, 1
;Maze_Solver.c,115 :: 		}
0x00B9	0x28A4      	GOTO       L_move_right17
L_move_right18:
;Maze_Solver.c,116 :: 		PORTB &= 0b11001001;
0x00BA	0x30C9      	MOVLW      201
0x00BB	0x0586      	ANDWF      PORTB, 1
;Maze_Solver.c,117 :: 		}
L_end_move_right:
0x00BC	0x0008      	RETURN
; end of _move_right
_initialize:
;Maze_Solver.c,52 :: 		void initialize() {
;Maze_Solver.c,53 :: 		TRISB = 0x00;
0x00BD	0x1683      	BSF        STATUS, 5
0x00BE	0x1303      	BCF        STATUS, 6
0x00BF	0x0186      	CLRF       TRISB
;Maze_Solver.c,54 :: 		TRISC = 0xff;
0x00C0	0x30FF      	MOVLW      255
0x00C1	0x0087      	MOVWF      TRISC
;Maze_Solver.c,55 :: 		TRISD = 0x00;
0x00C2	0x0188      	CLRF       TRISD
;Maze_Solver.c,57 :: 		OPTION_REG = 0x87; // Use internal clock Fosc/4 with a prescaler of 256
0x00C3	0x3087      	MOVLW      135
0x00C4	0x0081      	MOVWF      OPTION_REG
;Maze_Solver.c,60 :: 		TMR0 = 248; // will count 8 times before the overflow (8 * 128uS = 1ms)
0x00C5	0x30F8      	MOVLW      248
0x00C6	0x1283      	BCF        STATUS, 5
0x00C7	0x0081      	MOVWF      TMR0
;Maze_Solver.c,61 :: 		INTCON = 0b11100000; // GIE, T0IE, peripheral interrupt
0x00C8	0x30E0      	MOVLW      224
0x00C9	0x008B      	MOVWF      INTCON
;Maze_Solver.c,63 :: 		PORTC = 0x00;
0x00CA	0x0187      	CLRF       PORTC
;Maze_Solver.c,64 :: 		PORTB = 0x00;
0x00CB	0x0186      	CLRF       PORTB
;Maze_Solver.c,65 :: 		PORTD = 0x00;
0x00CC	0x0188      	CLRF       PORTD
;Maze_Solver.c,66 :: 		}
L_end_initialize:
0x00CD	0x0008      	RETURN
; end of _initialize
_main:
0x00CE	0x1283      	BCF        STATUS, 5
0x00CF	0x1303      	BCF        STATUS, 6
0x00D0	0x01A1      	CLRF       _turning_counter
0x00D1	0x01A2      	CLRF       34
;Maze_Solver.c,17 :: 		void main() {
;Maze_Solver.c,18 :: 		initialize();
0x00D2	0x20BD      	CALL       _initialize
;Maze_Solver.c,20 :: 		while (1) {
L_main0:
;Maze_Solver.c,21 :: 		myDelay(1500);
0x00D3	0x30DC      	MOVLW      220
0x00D4	0x00AB      	MOVWF      FARG_myDelay_x
0x00D5	0x3005      	MOVLW      5
0x00D6	0x00AC      	MOVWF      FARG_myDelay_x+1
0x00D7	0x2026      	CALL       _myDelay
;Maze_Solver.c,22 :: 		if(PORTC & 0b00001000){
0x00D8	0x1D87      	BTFSS      PORTC, 3
0x00D9	0x28DB      	GOTO       L_main2
;Maze_Solver.c,25 :: 		break;
0x00DA	0x28FD      	GOTO       L_main1
;Maze_Solver.c,26 :: 		}
L_main2:
;Maze_Solver.c,28 :: 		if ((PORTC & 0b00000100) && !(PORTC & 0b00000010)) {
0x00DB	0x1D07      	BTFSS      PORTC, 2
0x00DC	0x28E1      	GOTO       L_main5
0x00DD	0x1887      	BTFSC      PORTC, 1
0x00DE	0x28E1      	GOTO       L_main5
L__main22:
;Maze_Solver.c,29 :: 		move_forward();
0x00DF	0x203D      	CALL       _move_forward
;Maze_Solver.c,30 :: 		}
0x00E0	0x28FC      	GOTO       L_main6
L_main5:
;Maze_Solver.c,32 :: 		else if (!(PORTC & 0b00000100) && !(PORTC & 0b00000010)){
0x00E1	0x1907      	BTFSC      PORTC, 2
0x00E2	0x28F3      	GOTO       L_main9
0x00E3	0x1887      	BTFSC      PORTC, 1
0x00E4	0x28F3      	GOTO       L_main9
L__main21:
;Maze_Solver.c,33 :: 		stop();
0x00E5	0x2062      	CALL       _stop
;Maze_Solver.c,35 :: 		move_left();
0x00E6	0x2072      	CALL       _move_left
;Maze_Solver.c,36 :: 		myDelay(750);
0x00E7	0x30EE      	MOVLW      238
0x00E8	0x00AB      	MOVWF      FARG_myDelay_x
0x00E9	0x3002      	MOVLW      2
0x00EA	0x00AC      	MOVWF      FARG_myDelay_x+1
0x00EB	0x2026      	CALL       _myDelay
;Maze_Solver.c,37 :: 		move_left();
0x00EC	0x2072      	CALL       _move_left
;Maze_Solver.c,38 :: 		myDelay(750);
0x00ED	0x30EE      	MOVLW      238
0x00EE	0x00AB      	MOVWF      FARG_myDelay_x
0x00EF	0x3002      	MOVLW      2
0x00F0	0x00AC      	MOVWF      FARG_myDelay_x+1
0x00F1	0x2026      	CALL       _myDelay
;Maze_Solver.c,40 :: 		}
0x00F2	0x28FC      	GOTO       L_main10
L_main9:
;Maze_Solver.c,42 :: 		else if (PORTC & 0b00000010) {
0x00F3	0x1C87      	BTFSS      PORTC, 1
0x00F4	0x28FC      	GOTO       L_main11
;Maze_Solver.c,43 :: 		move_right();
0x00F5	0x2098      	CALL       _move_right
;Maze_Solver.c,44 :: 		myDelay(750);
0x00F6	0x30EE      	MOVLW      238
0x00F7	0x00AB      	MOVWF      FARG_myDelay_x
0x00F8	0x3002      	MOVLW      2
0x00F9	0x00AC      	MOVWF      FARG_myDelay_x+1
0x00FA	0x2026      	CALL       _myDelay
;Maze_Solver.c,45 :: 		move_forward();
0x00FB	0x203D      	CALL       _move_forward
;Maze_Solver.c,46 :: 		}
L_main11:
L_main10:
L_main6:
;Maze_Solver.c,49 :: 		}
0x00FC	0x28D3      	GOTO       L_main0
L_main1:
;Maze_Solver.c,50 :: 		}
L_end_main:
0x00FD	0x28FD      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [27]    _interrupt
0x001F       [7]    _____DoICP
0x0026      [18]    _myDelay
0x0038       [5]    _enables_off
0x003D      [37]    _move_forward
0x0062       [4]    _stop
0x0066      [12]    ___CC2DW
0x0072      [38]    _move_left
0x0098      [37]    _move_right
0x00BD      [17]    _initialize
0x00CE      [48]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [1]    PORTB
0x0007       [1]    PORTC
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x0021       [2]    _turning_counter
0x0023       [2]    _tick
0x0025       [2]    _turning_threshold
0x0027       [2]    ___DoICPAddr
0x0029       [1]    ___saveSTATUS
0x002A       [1]    ___savePCLATH
0x002B       [2]    FARG_myDelay_x
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [1]    TRISD
